#----------------------------------------------------------------------
# "We need a newly published trials report which lists InScope Protocol
# and CTGov trials that have published versions, but do not have a
# previously published version. The report will be generated by a user
# selected date range.
#
# This report has the same fields as the newly publishable trials report,
# but it will also include totals.Report identifying unpublished trials
# with publishable versions." [Sheri Khana, request #2443]
#
# Note that this script is given the name it has to avoid conflicts
# with NewlyPublishedTrials.py, a report that was retired a little
# over two years ago.
#
# BZIssue::2443
# BZIssue::5011
#----------------------------------------------------------------------
import cgi
import datetime
import sys
import cdrcgi
import cdrdb

#----------------------------------------------------------------------
# Set the form variables.
#----------------------------------------------------------------------
fields  = cgi.FieldStorage()
session = cdrcgi.getSession(fields)
request = cdrcgi.getRequest(fields)
startDate = fields and fields.getvalue('start') or None
endDate   = fields and fields.getvalue('end') or None
SUBMENU = "Report Menu"
buttons = ["Submit Request", SUBMENU, cdrcgi.MAINMENU, "Log Out"]
script  = "NewlyPublishedTrials2.py"
title   = "CDR Administration"
section = "Newly Published Trials Report"
header  = cdrcgi.header(title, title, section, script, buttons)

#----------------------------------------------------------------------
# Make sure we're logged in.
#----------------------------------------------------------------------
if not session: cdrcgi.bail('Unknown or expired CDR session.')

#----------------------------------------------------------------------
# Handle navigation requests.
#----------------------------------------------------------------------
if request == cdrcgi.MAINMENU:
    cdrcgi.navigateTo("Admin.py", session)
elif request == SUBMENU:
    cdrcgi.navigateTo("Reports.py", session)
elif request == "Log Out":
    cdrcgi.logout(session)

#----------------------------------------------------------------------
# Validate parameters
#----------------------------------------------------------------------
cdrcgi.valParmVal(request, valList=buttons, empty_ok=True)
cdrcgi.valParmDate(startDate, empty_ok=True)
cdrcgi.valParmDate(endDate, empty_ok=True)

#----------------------------------------------------------------------
# If we don't have a request, put up the request form.
#----------------------------------------------------------------------
if not (startDate and endDate):
    opts = {
        "buttons": buttons,
        "action": script,
        "subtitle": section,
        "session": session
    }
    form = cdrcgi.Page(title, **opts)
    end = datetime.date.today()
    start = end - datetime.timedelta(7)
    form.add("<fieldset>")
    form.add(form.B.LEGEND("Date Range"))
    form.add_date_field("start", "Start Date", value=start)
    form.add_date_field("end", "End Date", value=end)
    form.add("</fieldset>")
    form.send()

class Protocol:
    def __init__(self, id, docType, date, user):
        self.id                 = id
        self.docType            = docType
        self.date               = date
        self.user               = user
        self.status             = None
        self.reviewApprovalType = ''
        self.primaryIds         = set()
        self.studyCats          = set()
        self.specialCats        = set()
        self.sourceNames        = set()
        self.submissionComplete = set()
    def sort_sets(self):
        self.primaryIds  = sorted(self.primaryIds)
        self.studyCats   = sorted(self.studyCats)
        self.specialCats = sorted(self.specialCats)
        self.sourceNames = sorted(self.sourceNames)
        self.submissionComplete = sorted(self.submissionComplete)
    def __cmp__(self, other):
        result = cmp(self.studyCats, other.studyCats)
        if result:
            return result
        return cmp(self.id, other.id)

inScope    = {}
ctGov      = {}
prots      = {}
debug      = False # True
statuses   = {}
sources    = {}
approvals  = {}
categories = {}

def show(what):
    if debug:
        sys.stderr.write(what + '\n')

def fixString(s):
    if not s:
        return u""
    return unicode(s)

def fixList(values):
    return u", ".join([fixString(v) for v in values])

def getDateRange():
    return "%s through %s" % (startDate, endDate)

def writeTotals(sheet, styles, values, title, row):
    sheet.write(row, 0, title, styles.bold)
    row += 1
    for key in sorted(values):
        sheet.write(row, 0, key, styles.left)
        sheet.write(row, 1, values[key], styles.right)
        row += 1
    return row + 2

def addTotalsSheet(styles, groups):
    sheet = styles.add_sheet("Totals")
    sheet.col(0).width = styles.chars_to_width(30)
    sheet.col(1).width = styles.chars_to_width(5)
    sheet.write_merge(0, 0, 0, 6, "Newly Published Trials", styles.banner)
    sheet.write_merge(1, 1, 0, 6, getDateRange(), styles.banner)
    sheet.write(3, 0, "InScope and CTGov Totals", styles.title)
    row = 5
    for values, title in groups:
        row = writeTotals(sheet, styles, values, title, row)

def addWorksheet(styles, title, headers, widths, prots):
    assert(len(headers) == len(widths))
    sheet = styles.add_sheet(title)
    for col, chars in enumerate(widths):
        sheet.col(col).width = styles.chars_to_width(chars)
    banner = "Newly Published Trials"
    sheet.write_merge(0, 0, 0, len(widths) - 1, banner, styles.banner)
    sheet.write_merge(1, 1, 0, len(widths) - 1, getDateRange(), styles.banner)
    sheet.write(3, 0, "%s Protocols" % title, styles.title)
    for col, header in enumerate(headers):
        sheet.write(5, col, header, styles.header)
    for prot in prots.values():
        prot.sort_sets()
    row = 6
    for prot in sorted(prots.values()):
        rows = len(prot.studyCats) or 1
        for i in range(rows):
            sheet.write(row, 0, str(prot.id), styles.left)
            sheet.write(row, 1, fixList(prot.primaryIds), styles.left)
            if prot.studyCats:
                sheet.write(row, 2, fixString(prot.studyCats[i]), styles.left)
            col = 3
            if title == 'InScope':
                sheet.write(row, col, fixList(prot.specialCats), styles.left)
                col += 1
            sheet.write(row, col, fixString(prot.status), styles.left)
            col += 1
            if title == 'InScope':
                sheet.write(row, col, fixList(prot.sourceNames), styles.left)
                col += 1
                approval_type = fixString(prot.reviewApprovalType)
                sheet.write(row, col, approval_type, styles.left)
                col += 1
                submission_complete = fixList(prot.submissionComplete)
                sheet.write(row, col, submission_complete, styles.left)
                col += 1
            prot_date = prot.date and prot.date[:10] or ""
            sheet.write(row, col, prot_date, styles.left)
            col += 1
            sheet.write(row, col, fixString(prot.user), styles.left)
            row += 1
    row += 2
    sheet.write(row, 0, "Total: %d" % len(prots), styles.bold)

if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

#----------------------------------------------------------------------
# Start by creating a list of all protocols first published in the
# date range specified by the user.
#----------------------------------------------------------------------
conn = cdrdb.connect('CdrGuest')
# conn.setAutoCommit()
cursor = conn.cursor()
cursor.execute("""\
    CREATE TABLE #trials
             (id INT         NOT NULL,
        doc_type VARCHAR(32) NOT NULL,
         pub_job INT         NOT NULL,
        pub_date DATETIME    NOT NULL)""")
conn.commit()
show("#trials table created")
cursor.execute("""\
    INSERT INTO #trials (id, doc_type, pub_job, pub_date)
    SELECT d.id, t.name, MIN(e.id), MIN(e.completed)
      FROM document d
      JOIN doc_type t
        ON t.id = d.doc_type
      JOIN published_doc p
        ON p.doc_id = d.id
      JOIN pub_event e
        ON e.id = p.pub_proc
     WHERE t.name in ('InScopeProtocol', 'CTGovProtocol')
       AND e.pub_subset LIKE 'Push_Documents_To_Cancer.Gov%%'
       AND e.pub_subset NOT LIKE '%%-Remove'
  GROUP BY d.id, t.name
    HAVING MIN(e.completed) BETWEEN '%s' AND '%s 23:59:59'""" % (startDate,
                                                                 endDate),
               timeout = 300)
conn.commit()
show("#trials table filled")

#----------------------------------------------------------------------
# Next we create objects for each of the protocols in the report.
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT t.id, t.doc_type, t.pub_date, u.name
      FROM #trials t
      JOIN pub_proc_doc d
        ON d.doc_id = t.id
       AND d.pub_proc = t.pub_job
      JOIN doc_version v
        ON v.id = t.id
       AND v.num = d.doc_version
      JOIN usr u
        ON u.id = v.usr""", timeout = 300)
for docId, docType, pubDate, userName in cursor.fetchall():
    p = prots[docId] = Protocol(docId, docType, pubDate, userName)
    if p.docType == 'InScopeProtocol':
        inScope[docId] = p
    else:
        ctGov[docId] = p
show("protocol objects created")

#----------------------------------------------------------------------
# Fill in the protocol status values.
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE path IN ('/InScopeProtocol/ProtocolAdminInfo/CurrentProtocolStatus',
                    '/CTGovProtocol/OverallStatus')""", timeout = 300)
for docId, status in cursor.fetchall():
    status = status.strip()
    statuses[status] = statuses.get(status, 0) + 1
    prots[docId].status = status.strip()
show("status values added")

#----------------------------------------------------------------------
# Fill in the protocol primary IDs.
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE q.path IN ('/InScopeProtocol/ProtocolIDs/PrimaryID/IDString',
                      '/CTGovProtocol/IDInfo/OrgStudyID')""", timeout = 300)
for docId, protId in cursor.fetchall():
    prots[docId].primaryIds.add(protId)
show("primary IDs added")

#----------------------------------------------------------------------
# Fill in the protocol study categories.
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE q.path IN ('/CTGovProtocol/PDQIndexing/StudyCategory' +
                      '/StudyCategoryName',
                      '/InScopeProtocol/ProtocolDetail' +
                      '/StudyCategory/StudyCategoryName')""", timeout = 300)
for docId, value in cursor.fetchall():
    category = value.strip()
    prots[docId].studyCats.add(category)
    categories[category] = categories.get(category, 0) + 1
show("study categories added")

cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE q.path = '/InScopeProtocol/ProtocolSpecialCategory'
                  + '/SpecialCategory'""", timeout = 300)
for docId, value in cursor.fetchall():
    prots[docId].specialCats.add(value.strip())
show("special categories added")

#----------------------------------------------------------------------
# Next we get the review approval type values.
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE q.path = '/InScopeProtocol/ProtocolApproval'
                  + '/ReviewApprovalType'""", timeout = 300)
for docId, value in cursor.fetchall():
    approval = value.strip()
    prots[docId].reviewApprovalType = approval
    approvals[approval] = approvals.get(approval, 0) + 1
show("review approval types added")

#----------------------------------------------------------------------
# Finally, collect the protocol source names.
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE q.path = '/InScopeProtocol/ProtocolSources/ProtocolSource'
                  + '/SourceName'""", timeout = 300)
for docId, value in cursor.fetchall():
    source = value.strip()
    prots[docId].sourceNames.add(source)
    sources[source] = sources.get(source, 0) + 1
show("protocol source names added")

#----------------------------------------------------------------------
# New column requested by Sheri (#4057).
#----------------------------------------------------------------------
cursor.execute("""\
    SELECT q.doc_id, q.value
      FROM query_term q
      JOIN #trials t
        ON t.id = q.doc_id
     WHERE q.path = '/InScopeProtocol/ProtocolSources/ProtocolSource'
                  + '/DateSubmissionComplete'""", timeout = 300)
for docId, value in cursor.fetchall():
    date = value.strip()
    prots[docId].submissionComplete.add(date)
show("submission completion dates added")

#----------------------------------------------------------------------
# Create the report.
#----------------------------------------------------------------------
t = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
if not debug:
    print "Content-type: application/vnd.ms-excel"
    print ("Content-Disposition: attachment; "
           "filename=NewlyPublishedTrials-%s.xls" % t)
    print

styles = cdrcgi.ExcelStyles()
styles.title = styles.style(styles.bold_font(12))
styles.set_size(styles.banner, point_size=16)
show("workbook created")
titles  = ('InScope', 'CTGov')
headers = (
    ('DocID', 'ProtocolID','Study Category', 'Special Category',
     'Current\nProtocol\nStatus', 'Source', 'Approval',
     'Date\nSubmission\nComplete', 'Date\nPublished', 'User'),
    ('DocID', 'OrgStudyID', 'Study Category', 'Overall\nStatus',
     'Date Published', 'User')
    )
widths  = (
    (10, 30, 20, 20, 20, 20, 20, 20, 20, 15),
    (10, 30, 20, 20, 20, 15)
    )
groups = (
    (categories, "Study Category"),
    (statuses, "Current Protocol Status"),
    (sources, "Protocol Source"),
    (approvals, "Approval")
)
addTotalsSheet(styles, groups)
addWorksheet(styles, titles[0], headers[0], widths[0], inScope)
show("%s worksheet created" % titles[0])
addWorksheet(styles, titles[1], headers[1], widths[1], ctGov)
show("%s worksheet created" % titles[1])
styles.book.save(sys.stdout)
show("done")
